import os
import streamlit as st
import logging
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer

logging.basicConfig(level=logging.INFO)

class FileManager:
    """Manages file reading for resumes and job descriptions."""
    def __init__(self, resume_path, job_desc_path):
        self.resume_path = resume_path
        self.job_desc_path = job_desc_path

    def read_file(self, file_path):
        if not os.path.exists(file_path):
            logging.error(f"{file_path} does not exist.")
            raise FileNotFoundError(f"{file_path} does not exist.")
        with open(file_path, 'r') as file:
            return file.read()

    def get_resumes(self):
        return self.read_file(self.resume_path)

    def get_job_descriptions(self):
        return self.read_file(self.job_desc_path)

class TextProcessor:
    """Processes text data for comparison."""
    @staticmethod
    def to_word_set(text):
        # Tokenize text, remove stop words, and apply stemming
        stop_words = set(stopwords.words('english'))
        ps = PorterStemmer()
        tokens = word_tokenize(text)
        return set(ps.stem(word.lower()) for word in tokens if word.isalnum() and word.lower() not in stop_words)

    @staticmethod
    def find_common_words(text1, text2):
        words1 = TextProcessor.to_word_set(text1)
        words2 = TextProcessor.to_word_set(text2)
        return words1.intersection(words2)

class Matcher:
    """Matches resumes to job descriptions based on common words."""
    def __init__(self, resume_path, job_desc_path):
        self.file_manager = FileManager(resume_path, job_desc_path)

    def match(self):
        try:
            resumes = self.file_manager.get_resumes()
            job_descriptions = self.file_manager.get_job_descriptions()
            return TextProcessor.find_common_words(resumes, job_descriptions)
        except FileNotFoundError as e:
            logging.error(e)
            st.error(e)
            return set()

def main():
    st.title("Resume and Job Description Matcher")

    resume_file_path = st.text_input("Enter the path to the resumes file:")
    job_description_file_path = st.text_input("Enter the path to the job descriptions file:")

    if st.button("Match"):
        if resume_file_path and job_description_file_path:
            matcher = Matcher(resume_file_path, job_description_file_path)
            common_words = matcher.match()
            if common_words:
                st.write("Common words:", common_words)
            else:
                st.write("No common words found or an error occurred.")
        else:
            st.error("Please provide both file paths.")

if __name__ == "__main__":
    main()
